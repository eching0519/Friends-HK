{"ast":null,"code":"import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction Cancel(props) {\n  return React.createElement(\"svg\", Object.assign({\n    width: '24',\n    height: '24',\n    viewBox: '0 0 24 24'\n  }, props), React.createElement(\"path\", {\n    d: 'M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z'\n  }));\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar classnames = createCommonjsModule(function (module) {\n  /*!\n    Copyright (c) 2017 Jed Watson.\n    Licensed under the MIT License (MIT), see\n    http://jedwatson.github.io/classnames\n  */\n\n  /* global define */\n  (function () {\n    var hasOwn = {}.hasOwnProperty;\n\n    function classNames() {\n      var classes = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (!arg) continue;\n        var argType = typeof arg;\n\n        if (argType === 'string' || argType === 'number') {\n          classes.push(arg);\n        } else if (Array.isArray(arg) && arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        } else if (argType === 'object') {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        }\n      }\n\n      return classes.join(' ');\n    }\n\n    if (module.exports) {\n      classNames.default = classNames;\n      module.exports = classNames;\n    } else {\n      window.classNames = classNames;\n    }\n  })();\n});\n\nvar InputTags = function InputTags(_ref) {\n  var placeholder = _ref.placeholder,\n      values = _ref.values,\n      onTags = _ref.onTags,\n      name = _ref.name,\n      className = _ref.className,\n      elementClassName = _ref.elementClassName,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"placeholder\", \"values\", \"onTags\", \"name\", \"className\", \"elementClassName\"]);\n\n  var _useState = useState(values),\n      terms = _useState[0],\n      setTerms = _useState[1];\n\n  var _useState2 = useState(''),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(-1),\n      focusIndex = _useState3[0],\n      setFocusIndex = _useState3[1];\n\n  var inputRef = useRef(null);\n\n  var forceInputFocus = function forceInputFocus() {\n    if (inputRef.current && focusIndex === -1) {\n      inputRef.current.focus();\n    }\n  };\n\n  useLayoutEffect(function () {\n    if (terms.length === 0) {\n      setFocusIndex(-1);\n    }\n\n    onTags({\n      values: terms,\n      name: name\n    });\n  }, [terms.length]);\n  useEffect(function () {\n    setTerms(values);\n  }, [values]);\n  useEffect(function () {\n    forceInputFocus();\n  }, [focusIndex]);\n\n  var onchange = function onchange(event) {\n    setValue(event.currentTarget.value);\n  };\n\n  var onkeyup = function onkeyup(event) {\n    var key = event.key;\n    var currentValue = value.trim();\n    var isEndOfText = event.currentTarget.selectionEnd === currentValue.length;\n    var isPossibleRight = (isEndOfText || currentValue.length === 0) && terms.length > 0;\n\n    if ((key === 'Enter' || key === ' ') && currentValue != '') {\n      event.preventDefault();\n      setTerms([].concat(terms, [currentValue]));\n      setValue('');\n      setFocusIndex(-1);\n    } else if ((key === 'Backspace' || key === 'ArrowLeft') && isPossibleRight) {\n      event.preventDefault();\n      setFocusIndex(terms.length - 1);\n    } else if (key === 'ArrowRight' && isPossibleRight) {\n      event.preventDefault();\n      setFocusIndex(0);\n    }\n  };\n\n  var handleRemove = function handleRemove(index, focus) {\n    setTerms(terms.filter(function (_, i) {\n      return i !== index;\n    }));\n\n    if (focus) {\n      setFocusIndex(Math.max(focusIndex - 1, 0));\n    } else {\n      forceInputFocus();\n    }\n  };\n\n  var setSelectedIndex = function setSelectedIndex(index) {\n    if (index < terms.length && index > -1) {\n      setFocusIndex(index);\n    } else {\n      setFocusIndex(-1);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: 'form-control d-inline-flex flex-wrap'\n  }, terms.map(function (item, index) {\n    var focus = focusIndex === index;\n    return React.createElement(Element, {\n      key: \"\" + item + index,\n      value: item,\n      index: index,\n      onRemove: handleRemove,\n      focus: focus,\n      onSelectedIndex: setSelectedIndex,\n      className: elementClassName\n    });\n  }), React.createElement(\"input\", Object.assign({\n    \"data-testid\": 'input-tags',\n    ref: inputRef,\n    type: 'text',\n    className: classnames('border-0 w-auto flex-fill input-tags', className),\n    placeholder: placeholder,\n    \"aria-label\": placeholder,\n    value: value,\n    onChange: onchange,\n    onKeyUp: onkeyup,\n    autoFocus: true,\n    name: name\n  }, rest)));\n};\n\nvar Element = function Element(props) {\n  var _useState4 = useState(false),\n      focus = _useState4[0],\n      setFocus = _useState4[1];\n\n  var onclick = function onclick() {\n    props.onRemove(props.index, focus);\n  };\n\n  var ref = useRef(null);\n  useLayoutEffect(function () {\n    if (ref.current && props.focus) {\n      ref.current.focus();\n    }\n  }, [props.focus]);\n\n  var onkeydown = function onkeydown(event) {\n    var key = event.key;\n    event.preventDefault();\n\n    if (key === 'Backspace' || key === 'Delete') {\n      props.onRemove(props.index, props.focus);\n    } else if (key === 'ArrowLeft') {\n      props.onSelectedIndex(props.index - 1);\n    } else if (key === 'ArrowRight') {\n      props.onSelectedIndex(props.index + 1);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    \"data-testid\": 'tag-element',\n    ref: ref,\n    tabIndex: 0,\n    className: classnames('badge bg-secondary bg-gradient mr-1 my-auto py-auto pr-0 ', props.className),\n    onKeyUp: onkeydown,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: function onBlur() {\n      setFocus(false);\n    }\n  }, props.value, React.createElement(\"button\", {\n    \"data-testid\": 'tag-clean-element',\n    \"aria-label\": 'remove path fragment',\n    tabIndex: -1,\n    className: 'border-0 bg-transparent ml-3 mr-1 my-auto py-auto px-0',\n    style: {\n      outline: 0\n    },\n    onClick: onclick\n  }, React.createElement(Cancel, {\n    style: {\n      fill: 'var(--bs-white)',\n      opacity: 1\n    },\n    width: 18,\n    height: 18\n  })));\n};\n\nexport { InputTags };","map":null,"metadata":{},"sourceType":"module"}