{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport Cropper from 'cropperjs';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar applyDefaultOptions = function (cropper, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.enable,\n      enable = _a === void 0 ? true : _a,\n      _b = options.scaleX,\n      scaleX = _b === void 0 ? 1 : _b,\n      _c = options.scaleY,\n      scaleY = _c === void 0 ? 1 : _c,\n      _d = options.zoomTo,\n      zoomTo = _d === void 0 ? 0 : _d,\n      rotateTo = options.rotateTo;\n  enable ? cropper.enable() : cropper.disable();\n  cropper.scaleX(scaleX);\n  cropper.scaleY(scaleY);\n  rotateTo !== undefined && cropper.rotateTo(rotateTo);\n  zoomTo > 0 && cropper.zoomTo(zoomTo);\n};\n/**\r\n * sourced from: https://itnext.io/reusing-the-ref-from-forwardref-with-react-hooks-4ce9df693dd\r\n */\n\n\nvar useCombinedRefs = function () {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  var targetRef = useRef(null);\n  React.useEffect(function () {\n    refs.forEach(function (ref) {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(targetRef.current);\n      } else {\n        ref.current = targetRef.current;\n      }\n    });\n  }, [refs]);\n  return targetRef;\n};\n\nvar ReactCropper = React.forwardRef(function (_a, ref) {\n  var props = __rest(_a, []);\n\n  var _b = props.dragMode,\n      dragMode = _b === void 0 ? 'crop' : _b,\n      src = props.src,\n      style = props.style,\n      className = props.className,\n      crossOrigin = props.crossOrigin,\n      scaleX = props.scaleX,\n      scaleY = props.scaleY,\n      enable = props.enable,\n      zoomTo = props.zoomTo,\n      rotateTo = props.rotateTo,\n      _c = props.alt,\n      alt = _c === void 0 ? 'picture' : _c,\n      ready = props.ready,\n      onInitialized = props.onInitialized,\n      rest = __rest(props, [\"dragMode\", \"src\", \"style\", \"className\", \"crossOrigin\", \"scaleX\", \"scaleY\", \"enable\", \"zoomTo\", \"rotateTo\", \"alt\", \"ready\", \"onInitialized\"]);\n\n  var defaultOptions = {\n    scaleY: scaleY,\n    scaleX: scaleX,\n    enable: enable,\n    zoomTo: zoomTo,\n    rotateTo: rotateTo\n  };\n  var innerRef = useRef(null);\n  var combinedRef = useCombinedRefs(ref, innerRef);\n  /**\r\n   * Invoke zoomTo method when cropper is set and zoomTo prop changes\r\n   */\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = combinedRef.current) === null || _a === void 0 ? void 0 : _a.cropper) && typeof zoomTo === 'number') {\n      combinedRef.current.cropper.zoomTo(zoomTo);\n    }\n  }, [props.zoomTo]);\n  /**\r\n   * re-render when src changes\r\n   */\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = combinedRef.current) === null || _a === void 0 ? void 0 : _a.cropper) && typeof src !== 'undefined') {\n      combinedRef.current.cropper.reset().clear().replace(src);\n    }\n  }, [src]);\n  useEffect(function () {\n    if (combinedRef.current !== null) {\n      var cropper = new Cropper(combinedRef.current, __assign(__assign({\n        dragMode: dragMode\n      }, rest), {\n        ready: function (e) {\n          if (e.currentTarget !== null) {\n            applyDefaultOptions(e.currentTarget.cropper, defaultOptions);\n          }\n\n          ready && ready(e);\n        }\n      }));\n      onInitialized && onInitialized(cropper);\n    }\n    /**\r\n     * destroy cropper on un-mount\r\n     */\n\n\n    return function () {\n      var _a, _b;\n\n      (_b = (_a = combinedRef.current) === null || _a === void 0 ? void 0 : _a.cropper) === null || _b === void 0 ? void 0 : _b.destroy();\n    };\n  }, [combinedRef]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"img\", {\n    crossOrigin: crossOrigin,\n    src: src,\n    alt: alt,\n    style: {\n      opacity: 0,\n      maxWidth: '100%'\n    },\n    ref: combinedRef\n  }));\n});\nexport default ReactCropper;\nexport { ReactCropper as Cropper };","map":null,"metadata":{},"sourceType":"module"}