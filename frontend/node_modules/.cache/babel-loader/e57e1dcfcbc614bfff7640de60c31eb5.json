{"ast":null,"code":"import _slicedToArray from \"Z:\\\\3100project\\\\Friends-HK\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"Z:\\\\3100project\\\\Friends-HK\\\\frontend\\\\src\\\\app\\\\user-panel\\\\Chatbox\\\\Chatbox.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { io } from 'socket.io-client';\nimport StatusBar from './StatusBar/StatusBar';\nimport Messagesbox from './MessagesBox/MessagesBox';\nimport InputBar from './InputBar/InputBar';\nconst socket = io({\n  //no url: default to localhost:8080\n  autoConnect: false\n});\n\nconst Chatbox = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        roomId = _useState2[0],\n        setRoomId = _useState2[1]; //store current room id\n\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        roomName = _useState4[0],\n        setRoomName = _useState4[1]; //store current room name\n\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1]; //store message from the input box.\n\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        messageList = _useState8[0],\n        setmessageList = _useState8[1]; //store all message.\n\n\n  useEffect(() => {\n    socket.connect(); //estiblish socket io connection\n\n    return () => {\n      socket.removeAllListeners(); //clean up listener\n\n      socket.disconnect(); //disconnect socket io connection\n    };\n  }, []);\n  useEffect(() => {\n    //setSocket(io()) ; //estiblish socket io connection\n    //get chat history when room changed.\n    //if (sessionStorage.getItem(`${props.room}`) !== null) {\n    //console.log('fetch data from session storage');\n    //setmessageList(JSON.parse(sessionStorage.getItem(`${props.room}`)));\n    //} else {\n    // ADD features: if session storage does not contain chat history, try to fetch from server.\n    // if both server and session storage are empty, create new message.\n    //console.log('cannot fetch data from session storage');\n    setmessageList([{\n      text: 'welcome',\n      name: 'admin'\n    }]); //if there is no chat history, initialize the message list.\n    //}\n\n    const _userName$roomId = {\n      userName: props.userName,\n      roomId: props.roomId\n    },\n          userName = _userName$roomId.userName,\n          roomId = _userName$roomId.roomId; //get names and room id from Sidebar component.\n\n    console.log({\n      userName,\n      roomId\n    });\n    setRoomId(roomId);\n    socket.emit(\"joinRoom\", {\n      name: userName,\n      roomId: roomId\n    }, () => {//console.log('sent message');\n    }); //socket.emit(\"pingRoom\", { name: userName, room: room }, () => {\n    //console.log('sent message');\n    //});\n\n    socket.on(\"message\", message => {\n      console.log('client recieve:', message);\n      setmessageList([...messageList, message]); //add message to message list\n    });\n    return () => {\n      socket.emit(\"leaveRoom\", {\n        name: userName,\n        roomId: roomId\n      }, () => {});\n      socket.removeAllListeners(); //sessionStorage.setItem(`${props.room}`, JSON.stringify(messageList));\n      //setmessageList([]);\n    };\n  }, [socket, props.roomId]); //trigger useEffect if room changed from sidebar\n\n  useEffect(() => {\n    const _userName$roomId2 = {\n      userName: props.userName,\n      roomId: props.roomId\n    },\n          userName = _userName$roomId2.userName,\n          roomId = _userName$roomId2.roomId;\n    socket.on(\"message\", message => {\n      setmessageList([...messageList, message]); //To be update\n    });\n  }, [messageList]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      //console.log(message)\n      //setmessageList([...messageList, { text: message }])\n      socket.emit('sendMessage', {\n        roomId: roomId\n      }, {\n        text: message,\n        name: props.userName\n      }, message => {\n        console.log('message delivered:', message);\n        setMessage(''); //clear message input box\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header bg-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(StatusBar, {\n    userName: props.userName,\n    roomId: props.roomId,\n    roomName: props.roomName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-body bg-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Messagesbox, {\n    messageList: messageList,\n    userName: props.userName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-footer bg-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(InputBar, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))));\n};\n\nexport default Chatbox;","map":{"version":3,"sources":["Z:\\3100project\\Friends-HK\\frontend\\src\\app\\user-panel\\Chatbox\\Chatbox.js"],"names":["React","useEffect","useState","useContext","io","StatusBar","Messagesbox","InputBar","socket","autoConnect","Chatbox","props","roomId","setRoomId","roomName","setRoomName","message","setMessage","messageList","setmessageList","connect","removeAllListeners","disconnect","text","name","userName","console","log","emit","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { io } from 'socket.io-client';\r\n\r\nimport StatusBar from './StatusBar/StatusBar';\r\nimport Messagesbox from './MessagesBox/MessagesBox';\r\nimport InputBar from './InputBar/InputBar';\r\n\r\nconst socket = io({ //no url: default to localhost:8080\r\n    autoConnect: false\r\n});\r\n\r\nconst Chatbox = (props) => {\r\n    const [roomId, setRoomId] = useState('');   //store current room id\r\n    const [roomName, setRoomName] = useState('');   //store current room name\r\n\r\n    const [message, setMessage] = useState(''); //store message from the input box.\r\n    const [messageList, setmessageList] = useState([]);   //store all message.\r\n\r\n    useEffect(() => {\r\n        socket.connect();   //estiblish socket io connection\r\n        return () => {\r\n            socket.removeAllListeners();    //clean up listener\r\n            socket.disconnect();    //disconnect socket io connection\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        //setSocket(io()) ; //estiblish socket io connection\r\n\r\n        //get chat history when room changed.\r\n        //if (sessionStorage.getItem(`${props.room}`) !== null) {\r\n        //console.log('fetch data from session storage');\r\n        //setmessageList(JSON.parse(sessionStorage.getItem(`${props.room}`)));\r\n        //} else {\r\n\r\n        // ADD features: if session storage does not contain chat history, try to fetch from server.\r\n\r\n        // if both server and session storage are empty, create new message.\r\n        //console.log('cannot fetch data from session storage');\r\n        setmessageList([{ text: 'welcome', name: 'admin' }]);    //if there is no chat history, initialize the message list.\r\n        //}\r\n\r\n        const { userName, roomId } = { userName: props.userName, roomId: props.roomId }   //get names and room id from Sidebar component.\r\n        console.log({ userName, roomId });\r\n        setRoomId(roomId);\r\n\r\n        socket.emit(\"joinRoom\", { name: userName, roomId: roomId }, () => {\r\n            //console.log('sent message');\r\n        });\r\n\r\n        //socket.emit(\"pingRoom\", { name: userName, room: room }, () => {\r\n        //console.log('sent message');\r\n        //});\r\n\r\n        socket.on(\"message\", (message) => {\r\n            console.log('client recieve:', message)\r\n            setmessageList([...messageList, message]);    //add message to message list\r\n        });\r\n\r\n        return () => {\r\n            socket.emit(\"leaveRoom\", { name: userName, roomId: roomId }, () => {\r\n\r\n            });\r\n            socket.removeAllListeners();\r\n            //sessionStorage.setItem(`${props.room}`, JSON.stringify(messageList));\r\n            //setmessageList([]);\r\n        }\r\n    }, [socket, props.roomId]);   //trigger useEffect if room changed from sidebar\r\n\r\n\r\n    useEffect(() => {\r\n        const { userName, roomId } = { userName: props.userName, roomId: props.roomId };\r\n\r\n        socket.on(\"message\", (message) => {\r\n            setmessageList([...messageList, message]);    //To be update\r\n        });\r\n\r\n    }, [messageList]);\r\n\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (message) {\r\n            //console.log(message)\r\n            //setmessageList([...messageList, { text: message }])\r\n            socket.emit('sendMessage', { roomId: roomId }, { text: message, name: props.userName }, (message) => {\r\n                console.log('message delivered:', message);\r\n                setMessage('')  //clear message input box\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white\">\r\n                    <StatusBar userName={props.userName} roomId={props.roomId} roomName={props.roomName} />\r\n                </div>\r\n                <div className=\"card-body bg-white\">\r\n                    <Messagesbox messageList={messageList} userName={props.userName} />\r\n                </div>\r\n                <div className=\"card-footer bg-white\">\r\n                    <InputBar message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chatbox;"]},"metadata":{},"sourceType":"module"}