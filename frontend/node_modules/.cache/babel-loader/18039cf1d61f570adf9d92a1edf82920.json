{"ast":null,"code":"import getWeekYear from \"../getWeekYear/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name startOfWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Return the start of a local week-numbering year for the given date.\r\n *\r\n * @description\r\n * Return the start of a local week-numbering year.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Date} the start of a week-numbering year\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\r\n * const result = startOfWeekYear(new Date(2005, 6, 2))\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // The start of a week-numbering year for 2 July 2005\r\n * // if Monday is the first day of week\r\n * // and 4 January is always in the first week of the year:\r\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Mon Jan 03 2005 00:00:00\r\n */\n\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","map":null,"metadata":{},"sourceType":"module"}