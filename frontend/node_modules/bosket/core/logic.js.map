{"version":3,"sources":["../../src/core/logic.js"],"names":["css","array","tree","wrapEvents","nodeEvents","selectionStrategies","foldStrategies","clickStrategies","defaults","Core","inputs","outputs","state","refresh","TreeNode","isSelected","item","get","selection","contains","isFolded","strats","strategies","searched","isAsync","fold","map","strat","bind","reduce","last","curr","hasChildren","category","Array","isDisabled","disabledFun","disabled","isDraggable","dragndrop","draggable","isDroppable","droppable","mixCss","prop","ulCss","classes","depth","liCss","pending","unwrapPromise","push","asyncFun","async","Promise","reject","Error","then","res","catch","err","filter","e","onClick","event","click","forEach","ancestors","model","onSelect","stopPropagation","getDragEvents","condition","result","onDragStart","onDragOver","onDragEnter","onDragLeave","onDrop","onDragEnd","key","newVal","unfolded","i","length","set","RootNode","modifiers","onKey","control","getModifierState","meta","shift","neighbours","selectionStrategy","newSelection","wrapDragNDrop","filterTree","input","search","trim","treeFilter"],"mappings":"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","file":"logic.js","sourcesContent":["// @flow\n\nimport { css, array, tree } from \"../tools\"\nimport { wrapEvents, nodeEvents } from \"./dragndrop\"\nimport { selectionStrategies, foldStrategies, clickStrategies } from \"./strategies\"\nimport { defaults } from \"./defaults\"\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n//  Boilerplate  for framework class adapters\n\nclass Core<Input: Object> {\n    inputs: { get: () => Input }\n    outputs: Object\n    state: { get: () => Object, set: Object => void }\n    refresh: () => void\n\n    constructor(inputs: { get: () => Input }, outputs: Object, state: { get: () => Object, set: Object => void }, refresh: () => void) {\n        this.inputs = inputs\n        this.outputs = outputs\n        this.state = state\n        this.refresh = refresh\n    }\n\n}\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n// Tree node\n\nexport type TreeNodeInput = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    ancestors:          Object[],\n    strategies?:        Object,\n    disabled?:          Object => boolean,\n    dragndrop:          Object,\n    css:                { [key: string]: string },\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    depth?:             number\n}\n\nexport class TreeNode extends Core<*> {\n\n    /* Various checks */\n\n    isSelected = (item: Object) => array(this.inputs.get().selection).contains(item)\n    isFolded = (item: Object) : boolean => {\n        const strats = this.inputs.get().strategies\n        return  (!this.inputs.get().searched || this.isAsync(item)) &&\n                    (strats && strats.fold || [])\n                        .map(strat => (foldStrategies[strat] || strat).bind(this))\n                        .reduce((last, curr) => last && curr(item, last), true)\n    }\n    hasChildren = (item: Object) => item[this.inputs.get().category] && item[this.inputs.get().category] instanceof Array\n    isAsync = (item: ?Object) : boolean => !!item && [this.inputs.get().category] && typeof item[this.inputs.get().category] === \"function\"\n    isDisabled = (item: Object) => {\n        const disabledFun = this.inputs.get().disabled\n        return disabledFun ? disabledFun(item) : false\n    }\n    isDraggable = (item: ?Object) =>\n        item &&\n        this.inputs.get().dragndrop.draggable && (\n            typeof this.inputs.get().dragndrop.draggable === \"function\" ?\n                this.inputs.get().dragndrop.draggable(item) :\n                true\n        )\n    isDroppable = (item: ?Object) =>\n        this.inputs.get().dragndrop.droppable && (\n            typeof this.inputs.get().dragndrop.droppable === \"function\" ?\n                this.inputs.get().dragndrop.droppable(item) :\n                true\n        )\n\n    /* Styles calculation */\n\n    // Css mixin helper\n    mixCss = (prop: string) => this.inputs.get().css[prop] || defaults.css[prop]\n\n    ulCss = () =>\n        css.classes({\n            [`${this.mixCss(\"depth\")}-${this.inputs.get().depth || 0}`]: true\n        })\n\n    liCss = (item: Object) =>\n        css.classes({\n            [this.mixCss(\"selected\")]:  this.isSelected(item),\n            [this.mixCss(\"category\")]:  this.hasChildren(item) || this.isAsync(item),\n            [this.mixCss(\"folded\")]:    this.hasChildren(item) || this.isAsync(item) ? this.isFolded(item) : null,\n            [this.mixCss(\"disabled\")]:  this.isDisabled(item),\n            [this.mixCss(\"async\")]:     this.isAsync(item) && this.isFolded(item),\n            [this.mixCss(\"loading\")]:   this.isAsync(item) && !this.isFolded(item)\n        })\n\n    /* Promises */\n\n    // Pending promises\n    pending = []\n\n    // Unwrap a promise and mutate the model to add the results\n    unwrapPromise = (item: Object) : Promise<mixed> => {\n        this.pending.push(item)\n        const asyncFun = this.inputs.get().async\n        if(!asyncFun)\n            return Promise.reject(new Error(\"Missing async function.\"))\n        else\n            return asyncFun(item[this.inputs.get().category])\n                .then(res => {\n                    item[this.inputs.get().category] = res\n                    this.refresh()\n                })\n                .catch(err => {\n                    /* eslint-disable */\n                    throw err\n                    /* eslint-enable */\n                })\n                .then(() => this.pending = this.pending.filter(e => e !== item))\n    }\n\n    /* Events */\n\n    // On item click\n    onClick = (item: Object) =>\n        (event: MouseEvent) => {\n            if(this.isDisabled(item))\n                return\n            const strats = this.inputs.get().strategies;\n            (strats && strats.click || [])\n                .map(strat => (clickStrategies[strat] || strat).bind(this))\n                .forEach(strat => strat(item, event, this.inputs.get().ancestors, this.inputs.get().model))\n            this.inputs.get().onSelect(item, this.inputs.get().ancestors, this.inputs.get().model)\n            event.stopPropagation()\n        }\n\n    // On opener click\n    onOpener(item: Object) {\n        return (event: MouseEvent) => {\n            const newVal = this.state.get().unfolded.filter(i => i !== item)\n            if(newVal.length === this.state.get().unfolded.length)\n                newVal.push(item)\n            this.state.set({ unfolded: newVal })\n            event.stopPropagation()\n        }\n    }\n\n    // Drag'n'drop //\n\n    getDragEvents = (item: ?Object, condition?: boolean = true) => {\n        if(!condition) return {}\n        const result = {\n            draggable:      this.isDraggable(item),\n            onDragStart:    this.isDraggable(item) && nodeEvents.onDragStart(item).bind(this),\n            onDragOver:     this.isDroppable(item) && nodeEvents.onDragOver(item).bind(this),\n            onDragEnter:    this.isDroppable(item) && nodeEvents.onDragEnter(item).bind(this),\n            onDragLeave:    this.isDroppable(item) && nodeEvents.onDragLeave(item).bind(this),\n            onDrop:         this.isDroppable(item) && nodeEvents.onDrop(item).bind(this),\n            onDragEnd:      this.isDraggable(item) && nodeEvents.onDragEnd(item).bind(this)\n        }\n        for(const key in result)\n            if(!result[key])\n                delete result[key]\n        return result\n    }\n\n}\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n// Root node of the tree\n\nexport type RootNodeInput = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    strategies:         Object,\n    css:                { [key: string]: string },\n    dragndrop?:         Object,\n    search?:            string => Object => boolean\n}\n\nexport class RootNode extends Core<*> {\n\n    /* Events */\n\n    // Keyboard modifiers list\n    modifiers = {}\n    onKey = (event: KeyboardEvent) => {\n        this.modifiers = {\n            control: event.getModifierState(\"Control\"),\n            meta: event.getModifierState(\"Meta\"),\n            shift: event.getModifierState(\"Shift\")\n        }\n    }\n\n    // When new element(s) are selected\n    onSelect = (item: Object, ancestors: Object[], neighbours: Object[]) => {\n        const selectionStrategy = this.inputs.get().strategies.selection || []\n        const newSelection = selectionStrategy\n            .map(strat => (selectionStrategies[strat] || strat).bind(this))\n            .reduce((last, curr) => curr(item, last, neighbours, ancestors), this.inputs.get().selection)\n        this.outputs.onSelect(newSelection, item, ancestors, neighbours)\n        return newSelection\n    }\n\n    // Framework input wrapper\n    wrapDragNDrop = wrapEvents.bind(this)\n\n    // Css mixin helper\n    mixCss = (prop: string) => this.inputs.get().css[prop] || defaults.css[prop]\n\n    // Used to filter the tree when performing a search\n    filterTree = (input: string) => {\n        const search = this.inputs.get().search\n        return !search ? null : !input.trim() ? null :\n            tree(this.inputs.get().model, this.inputs.get().category)\n                .treeFilter(search(input.trim()))\n    }\n\n}\n"]}