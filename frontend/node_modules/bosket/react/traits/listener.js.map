{"version":3,"sources":["../../../src/react/traits/listener.js"],"names":["React","displayName","withListener","eventType","propName","mountOn","autoMount","regulate","props","listening","ticking","callback","subscribe","cb","onEvent","event","window","requestAnimationFrame","bind","mount","document","addEventListener","unmount","removeEventListener","listenerProp","nextProps","Component"],"mappings":";;;;;;;;;;;;AAEA;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,OAAO,IAAMC,eAAyB,SAAzBA,YAAyB;AAAA,mFAMlC,EANkC;AAAA,8BAClCC,SADkC;AAAA,QAClCA,SADkC,kCACtB,OADsB;AAAA,6BAElCC,QAFkC;AAAA,QAElCA,QAFkC,iCAEvB,UAFuB;AAAA,4BAGlCC,OAHkC;AAAA,QAGlCA,OAHkC,gCAGxB,IAHwB;AAAA,8BAIlCC,SAJkC;AAAA,QAIlCA,SAJkC,kCAItB,KAJsB;AAAA,6BAKlCC,QALkC;AAAA,QAKlCA,QALkC,iCAKvB,KALuB;;AAAA,WAM3B;AAAA;;AAAA;AAAA;;AAcH;;AAEA,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACTA,KADS;;AAAA,sBAZnBC,SAYmB,GAZP,KAYO;AAAA,sBAXnBC,OAWmB,GAXT,KAWS;AAAA,sBAsBnBC,QAtBmB,GAsBR,IAtBQ;;AAAA,sBAuBnBC,SAvBmB,GAuBP,UAACC,EAAD,EAA2C;AACnD,0BAAKF,QAAL,GAAgBE,EAAhB;AACH,iBAzBkB;;AAAA,sBA0BnBC,OA1BmB,GA0BT,UAASC,KAAT,EAAuB;AAAA;;AAC7B,wBAAG,KAAKJ,QAAR,EAAkB;AACd,4BAAGJ,QAAH,EAAa;AACT,gCAAG,CAAC,KAAKG,OAAT,EAAkB;AACd,oCAAMC,WAAW,KAAKA,QAAtB;AACAK,uCAAOC,qBAAP,CAA6B;AAAA,2CAAMN,SAASI,KAAT,EAAgB,YAAM;AAAE,+CAAKL,OAAL,GAAe,KAAf;AAAsB,qCAA9C,CAAN;AAAA,iCAA7B;AACH;AACD,iCAAKA,OAAL,GAAe,IAAf;AACH,yBAND,MAOI,KAAKC,QAAL,CAAcI,KAAd;AACP;AACJ,iBAXS,CAWRG,IAXQ,OA1BS;;AAAA,sBAyCnBC,KAzCmB,GAyCX,YAAM;AACV,wBAAG,CAAC,MAAKV,SAAT,EAAoB;AAChBW,iCAASC,gBAAT,CAA0BlB,SAA1B,EAAqC,MAAKW,OAA1C;AACA,8BAAKL,SAAL,GAAiB,IAAjB;AACH;AACJ,iBA9CkB;;AAAA,sBAgDnBa,OAhDmB,GAgDT,YAAM;AACZ,wBAAG,MAAKb,SAAR,EAAmB;AACfW,iCAASG,mBAAT,CAA6BpB,SAA7B,EAAwC,MAAKW,OAA7C;AACA,8BAAKL,SAAL,GAAiB,KAAjB;AACH;AACJ,iBArDkB;;AAEf,oBAAGH,SAAH,EAAc,MAAKa,KAAL;AACd,sBAAKK,YAAL,uBACKpB,QADL,EACgB;AACRQ,+BAAW,MAAKA,SADR;AAERO,2BAAW,MAAKA,KAFR;AAGRG,6BAAW,MAAKA;AAHR,iBADhB;AAHe;AAUlB;;AA1BE;AAAA;AAAA,uDA4BoB;AACnB,yBAAKA,OAAL;AACH;AA9BE;AAAA;AAAA,0DAgCuBG,SAhCvB,EAgCkC;AACjC,wBAAGpB,OAAH,EAAYA,QAAQa,IAAR,CAAa,IAAb,EAAmBO,SAAnB,IAAgC,KAAKN,KAAL,EAAhC,GAA+C,KAAKG,OAAL,EAA/C;AACf;;AAED;;AAmBA;;AAvDG;AAAA;;;AAuEH;;AAvEG,yCAyEM;AACL,2BAAO,oBAAC,SAAD,eAAgB,KAAKE,YAArB,EAAyC,KAAKhB,KAA9C,EAAP;AACH;AA3EE;;AAAA;AAAA,UACOR,MAAM0B,SADb,UAGIzB,WAHJ,GAGkBA,YAAY,cAAZ,EAA4ByB,SAA5B,CAHlB;AAAA,KAN2B;AAAA,CAA/B","file":"listener.js","sourcesContent":["// @flow\n\n/* Adds a configurable global listener. */\n\nimport React from \"react\"\n\nimport type { trait } from \"./helpers\"\nimport { displayName } from \"./helpers\"\n\nexport const withListener : trait<> = ({\n    eventType = \"click\",\n    propName = \"listener\",\n    mountOn = null,\n    autoMount = false,\n    regulate = false\n} = {}) => Component =>\n    class extends React.Component<{ listener: Object }, void> {\n\n        static displayName = displayName(\"withListener\", Component)\n        listening = false\n        ticking = false\n        listenerProp: {\n            [key: string]: {\n                subscribe: ((Event, ?(void => void)) => mixed) => void,\n                mount:     () => void,\n                unmount:   () => void\n            }\n        }\n\n        /* Lifecycle */\n\n        constructor(props) {\n            super(props)\n            if(autoMount) this.mount()\n            this.listenerProp = {\n                [propName]: {\n                    subscribe: this.subscribe,\n                    mount:     this.mount,\n                    unmount:   this.unmount\n                }\n            }\n        }\n\n        componentWillUnmount() {\n            this.unmount()\n        }\n\n        componentWillReceiveProps(nextProps) {\n            if(mountOn) mountOn.bind(this)(nextProps) ? this.mount() : this.unmount()\n        }\n\n        /* Subscriptions */\n\n        callback = null\n        subscribe = (cb: (Event, ?(void => void)) => mixed) => {\n            this.callback = cb\n        }\n        onEvent = function(event: Event) {\n            if(this.callback) {\n                if(regulate) {\n                    if(!this.ticking) {\n                        const callback = this.callback\n                        window.requestAnimationFrame(() => callback(event, () => { this.ticking = false }))\n                    }\n                    this.ticking = true\n                } else\n                    this.callback(event)\n            }\n        }.bind(this)\n\n        /* Events */\n\n        mount = () => {\n            if(!this.listening) {\n                document.addEventListener(eventType, this.onEvent)\n                this.listening = true\n            }\n        }\n\n        unmount = () => {\n            if(this.listening) {\n                document.removeEventListener(eventType, this.onEvent)\n                this.listening = false\n            }\n        }\n\n        /* Rendering */\n\n        render() {\n            return <Component { ...this.listenerProp } { ...this.props } ></Component>\n        }\n    }\n"]}