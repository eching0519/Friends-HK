// @flow

import { array } from "./arrays"

type treeMap<T> = Map<T, treeMap<T>>
type treeType<T> = {
    flatten: () => T[],
    filter: (T => boolean) => T[],
    treeFilter: (T => boolean) => treeMap<T>,
    add: (T, T) => T[],
    visit: (T[] => void) => void
}

export const tree = <Item: Object>(t: Item[], prop: string) : treeType<Item> => ({
    flatten: () => {
        let flattened : Item[] = []
        let fifo : Item[][] = [t]
        while(fifo.length > 0) {
            const tree: Item[] = fifo.pop()
            if(!(tree instanceof Array))
                continue
            flattened = [ ...array(flattened).notIn(tree), ...tree ]
            fifo = [ ...fifo, ...tree.filter(item => item[prop]).map(item => item[prop]) ]
        }

        return flattened
    },
    filter: filterFun => {
        const copy = t.filter(filterFun)
        const recurse = list => {
            list.forEach(item => {
                if(item[prop] && item[prop] instanceof Array) {
                    item[prop] = item[prop].filter(filterFun)
                    recurse(item[prop])
                }
            })
        }
        recurse(copy)
        return copy
    },
    treeFilter: filterFun => {
        const finalMap = new Map()

        const recurse = (list, map) => {
            list.forEach(item => {
                if(item[prop] && item[prop] instanceof Array) {
                    const childMap = new Map()
                    recurse(item[prop], childMap)
                    if(childMap.size > 0) {
                        map.set(item, childMap)
                    } else if(filterFun(item)) {
                        map.set(item, new Map())
                    }
                } else if(filterFun(item)) {
                    map.set(item, null)
                }
            })
        }
        recurse(t, finalMap)
        return finalMap
    },
    add: (parent, elt) => {
        let fifo = [t]
        while(fifo.length > 0) {
            const tree = fifo.pop()
            const idx = tree.indexOf(parent)
            if(idx >= 0 && tree[idx][prop]) {
                tree[idx][prop] = tree[idx][prop].slice()
                tree[idx][prop].push(elt)
                return t
            }
            fifo = [ ...fifo, ...tree.filter(item => item[prop]).map(item => item[prop]) ]
        }
        return t
    },
    visit: visitor => {
        const fifo: Item[][] = [t]
        while(fifo.length > 0) {
            const tree = fifo.pop()
            visitor(tree)
            tree.forEach(child => child[prop] && child[prop] instanceof Array ?
                fifo.push(child[prop]) :
                null)
        }
    }
})
