{"version":3,"sources":["../../src/tools/arrays.js"],"names":["array","self","last","length","arr","otherCondition","filter","indexOf","elt","notIn","is","isIn","reduce","acc","curr","contains","element","allIn","every"],"mappings":";;AAWA,OAAO,IAAMA,QAAQ,SAARA,KAAQ,CAAIC,IAAJ;AAAA,WAAkC;AACnDC,cAAM;AAAA,mBAAMD,KAAKE,MAAL,GAAc,CAAd,GAAkBF,KAAKA,KAAKE,MAAL,GAAc,CAAnB,CAAlB,GAA0C,IAAhD;AAAA,SAD6C;AAEnD,cAAM,aAACC,GAAD,EAAMC,cAAN;AAAA,mBAAyBJ,KAAKK,MAAL,CAAY;AAAA,uBACvCF,IAAIG,OAAJ,CAAYC,GAAZ,KAAoB,CAApB,KAA0B,CAACH,cAAD,IAAmBA,eAAeG,GAAf,CAA7C,CADuC;AAAA,aAAZ,CAAzB;AAAA,SAF6C;AAInDC,eAAO,eAACL,GAAD,EAAMC,cAAN;AAAA,mBAAyBJ,KAAKK,MAAL,CAAY;AAAA,uBACxCF,IAAIG,OAAJ,CAAYC,GAAZ,IAAmB,CAAnB,KAAyB,CAACH,cAAD,IAAmBA,eAAeG,GAAf,CAA5C,CADwC;AAAA,aAAZ,CAAzB;AAAA,SAJ4C;AAMnDE,YAAI,kBAA2BL,cAA3B;AAAA,iCAAGM,IAAH;AAAA,gBAAGA,IAAH,6BAAU,EAAV;AAAA,kCAAcF,KAAd;AAAA,gBAAcA,KAAd,8BAAsB,EAAtB;AAAA,mBAA8CR,KAAKK,MAAL,CAAY;AAAA,uBAC1DK,KAAKC,MAAL,CAAY,UAACC,GAAD,EAAMC,IAAN;AAAA,2BAAeA,KAAKP,OAAL,CAAaC,GAAb,KAAqB,CAArB,IAA0BK,GAAzC;AAAA,iBAAZ,EAA0D,IAA1D,KACAJ,MAAMG,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN;AAAA,2BAAeA,KAAKP,OAAL,CAAaC,GAAb,IAAoB,CAApB,IAAyBK,GAAxC;AAAA,iBAAb,EAA0D,IAA1D,CADA,KAEC,CAACR,cAAD,IAAmBA,eAAeG,GAAf,CAFpB,CAD0D;AAAA,aAAZ,CAA9C;AAAA,SAN+C;AAWnDO,kBAAU;AAAA,mBAAWd,KAAKM,OAAL,CAAaS,OAAb,KAAyB,CAApC;AAAA,SAXyC;AAYnDC,eAAO;AAAA,mBAAOhB,KAAKiB,KAAL,CAAW;AAAA,uBAAOd,IAAIG,OAAJ,CAAYC,GAAZ,KAAoB,CAA3B;AAAA,aAAX,CAAP;AAAA;AAZ4C,KAAlC;AAAA,CAAd","file":"arrays.js","sourcesContent":["// @flow\n\ntype arrayType<T> = {\n    last: () => T | null,\n    in: (T[], ?(T => boolean)) => T[],\n    notIn: (T[], ?(T => boolean)) => T[],\n    is: ({ isIn: T[][], notIn: T[][] }, ?(T => boolean)) => T[],\n    contains: T => boolean,\n    allIn: T[] => boolean\n}\n\nexport const array = <T>(self: T[]) : arrayType<T> => ({\n    last: () => self.length > 0 ? self[self.length - 1] : null,\n    \"in\": (arr, otherCondition) => self.filter(elt =>\n        arr.indexOf(elt) >= 0 && (!otherCondition || otherCondition(elt))),\n    notIn: (arr, otherCondition) => self.filter(elt =>\n        arr.indexOf(elt) < 0 && (!otherCondition || otherCondition(elt))),\n    is: ({ isIn = [], notIn = []}, otherCondition) => self.filter(elt =>\n        isIn.reduce((acc, curr) => curr.indexOf(elt) >= 0 && acc, true) &&\n        notIn.reduce((acc, curr) => curr.indexOf(elt) < 0 && acc, true) &&\n        (!otherCondition || otherCondition(elt))\n    ),\n    contains: element => self.indexOf(element) >= 0,\n    allIn: arr => self.every(elt => arr.indexOf(elt) >= 0)\n})\n"]}