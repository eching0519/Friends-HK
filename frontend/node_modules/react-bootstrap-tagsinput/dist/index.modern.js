import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function Cancel(props) {
  return React.createElement("svg", Object.assign({
    width: '24',
    height: '24',
    viewBox: '0 0 24 24'
  }, props), React.createElement("path", {
    d: 'M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z'
  }));
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

var InputTags = function InputTags(_ref) {
  var placeholder = _ref.placeholder,
      values = _ref.values,
      onTags = _ref.onTags,
      name = _ref.name,
      className = _ref.className,
      elementClassName = _ref.elementClassName,
      rest = _objectWithoutPropertiesLoose(_ref, ["placeholder", "values", "onTags", "name", "className", "elementClassName"]);

  var _useState = useState(values),
      terms = _useState[0],
      setTerms = _useState[1];

  var _useState2 = useState(''),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = useState(-1),
      focusIndex = _useState3[0],
      setFocusIndex = _useState3[1];

  var inputRef = useRef(null);

  var forceInputFocus = function forceInputFocus() {
    if (inputRef.current && focusIndex === -1) {
      inputRef.current.focus();
    }
  };

  useLayoutEffect(function () {
    if (terms.length === 0) {
      setFocusIndex(-1);
    }

    onTags({
      values: terms,
      name: name
    });
  }, [terms.length]);
  useEffect(function () {
    setTerms(values);
  }, [values]);
  useEffect(function () {
    forceInputFocus();
  }, [focusIndex]);

  var onchange = function onchange(event) {
    setValue(event.currentTarget.value);
  };

  var onkeyup = function onkeyup(event) {
    var key = event.key;
    var currentValue = value.trim();
    var isEndOfText = event.currentTarget.selectionEnd === currentValue.length;
    var isPossibleRight = (isEndOfText || currentValue.length === 0) && terms.length > 0;

    if ((key === 'Enter' || key === ' ') && currentValue != '') {
      event.preventDefault();
      setTerms([].concat(terms, [currentValue]));
      setValue('');
      setFocusIndex(-1);
    } else if ((key === 'Backspace' || key === 'ArrowLeft') && isPossibleRight) {
      event.preventDefault();
      setFocusIndex(terms.length - 1);
    } else if (key === 'ArrowRight' && isPossibleRight) {
      event.preventDefault();
      setFocusIndex(0);
    }
  };

  var handleRemove = function handleRemove(index, focus) {
    setTerms(terms.filter(function (_, i) {
      return i !== index;
    }));

    if (focus) {
      setFocusIndex(Math.max(focusIndex - 1, 0));
    } else {
      forceInputFocus();
    }
  };

  var setSelectedIndex = function setSelectedIndex(index) {
    if (index < terms.length && index > -1) {
      setFocusIndex(index);
    } else {
      setFocusIndex(-1);
    }
  };

  return React.createElement("div", {
    className: 'form-control d-inline-flex flex-wrap'
  }, terms.map(function (item, index) {
    var focus = focusIndex === index;
    return React.createElement(Element, {
      key: "" + item + index,
      value: item,
      index: index,
      onRemove: handleRemove,
      focus: focus,
      onSelectedIndex: setSelectedIndex,
      className: elementClassName
    });
  }), React.createElement("input", Object.assign({
    "data-testid": 'input-tags',
    ref: inputRef,
    type: 'text',
    className: classnames('border-0 w-auto flex-fill input-tags', className),
    placeholder: placeholder,
    "aria-label": placeholder,
    value: value,
    onChange: onchange,
    onKeyUp: onkeyup,
    autoFocus: true,
    name: name
  }, rest)));
};

var Element = function Element(props) {
  var _useState4 = useState(false),
      focus = _useState4[0],
      setFocus = _useState4[1];

  var onclick = function onclick() {
    props.onRemove(props.index, focus);
  };

  var ref = useRef(null);
  useLayoutEffect(function () {
    if (ref.current && props.focus) {
      ref.current.focus();
    }
  }, [props.focus]);

  var onkeydown = function onkeydown(event) {
    var key = event.key;
    event.preventDefault();

    if (key === 'Backspace' || key === 'Delete') {
      props.onRemove(props.index, props.focus);
    } else if (key === 'ArrowLeft') {
      props.onSelectedIndex(props.index - 1);
    } else if (key === 'ArrowRight') {
      props.onSelectedIndex(props.index + 1);
    }
  };

  return React.createElement("div", {
    "data-testid": 'tag-element',
    ref: ref,
    tabIndex: 0,
    className: classnames('badge bg-secondary bg-gradient mr-1 my-auto py-auto pr-0 ', props.className),
    onKeyUp: onkeydown,
    onFocus: function onFocus() {
      setFocus(true);
    },
    onBlur: function onBlur() {
      setFocus(false);
    }
  }, props.value, React.createElement("button", {
    "data-testid": 'tag-clean-element',
    "aria-label": 'remove path fragment',
    tabIndex: -1,
    className: 'border-0 bg-transparent ml-3 mr-1 my-auto py-auto px-0',
    style: {
      outline: 0
    },
    onClick: onclick
  }, React.createElement(Cancel, {
    style: {
      fill: 'var(--bs-white)',
      opacity: 1
    },
    width: 18,
    height: 18
  })));
};

export { InputTags };
//# sourceMappingURL=index.modern.js.map
