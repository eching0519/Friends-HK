import { Component } from 'react';
import { array, func, bool, string, number } from 'prop-types';
import matchSorter from 'match-sorter';
import sortBy from 'lodash.sortby';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var calculatePages = function (items, itemsPerPage) {
    return Math.ceil(items / itemsPerPage);
};
var sortData = function (data, key, direction) {
    if (direction === void 0) { direction = 'asc'; }
    var sorted = sortBy(data, key);
    return direction === 'desc' ? sorted.reverse() : sorted;
};
var paginateData = function (data, activePage, itemsPerPage) {
    var from = activePage * itemsPerPage;
    var to = from + itemsPerPage;
    return data.slice(from, to);
};

var DataSort = /** @class */ (function (_super) {
    __extends(DataSort, _super);
    function DataSort() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            sortBy: _this.props.defaultSortBy || null,
            direction: _this.props.defaultDirection || 'asc',
            pages: null,
            activePage: _this.props.defaultActivePage || 0,
            data: [],
            searchQuery: ''
        };
        _this.reset = function () {
            _this.setState({
                sortBy: null,
                direction: 'asc',
                activePage: 0
            });
        };
        _this.prevPage = function () {
            if (_this.props.paginate === null) {
                return;
            }
            var activePage = (_this.isPaginationControlled() ? _this.props : _this.state).activePage;
            if (activePage === 0) {
                return;
            }
            _this.goToPage(activePage - 1);
        };
        _this.nextPage = function () {
            if (_this.props.paginate === null) {
                return;
            }
            var activePage = (_this.isPaginationControlled() ? _this.props : _this.state).activePage;
            var pages = _this.state.pages;
            if (activePage + 1 < pages) {
                _this.goToPage(activePage + 1);
            }
        };
        _this.goToPage = function (activePage) {
            if (_this.props.paginate === null) {
                return;
            }
            if (typeof activePage !== 'number' || activePage < 0 || activePage > _this.state.pages) {
                return;
            }
            _this.setState({ activePage: activePage });
        };
        _this.setSortBy = function (sortBy) {
            _this.setState({ sortBy: sortBy });
        };
        _this.setDirection = function (direction) {
            if (direction === 'asc' || direction === 'desc') {
                _this.setState({ direction: direction });
            }
        };
        _this.toggleDirection = function () {
            _this.setState({
                direction: _this.state.direction === 'asc' ? 'desc' : 'asc'
            });
        };
        /**
         * Search dataset with given query
         *
         * @param value: string
         */
        _this.search = function (value) {
            _this.setState({ searchQuery: value });
        };
        return _this;
    }
    DataSort.prototype.componentDidMount = function () {
        var _a = this.props, itemsPerPage = _a.itemsPerPage, paginate = _a.paginate, data = _a.data;
        if (paginate) {
            this.setState({ pages: calculatePages(data.length, itemsPerPage) });
        }
    };
    DataSort.prototype.isPaginationControlled = function () {
        return typeof this.props.activePage !== 'undefined';
    };
    DataSort.prototype.isSortByControlled = function () {
        return typeof this.props.sortBy !== 'undefined';
    };
    DataSort.prototype.isDirectionControlled = function () {
        return typeof this.props.direction !== 'undefined';
    };
    DataSort.prototype.isSearchControlled = function () {
        return typeof this.props.searchQuery !== 'undefined';
    };
    DataSort.prototype.render = function () {
        var _a = this.props, render = _a.render, paginate = _a.paginate, itemsPerPage = _a.itemsPerPage, data = _a.data;
        var activePage = (this.isPaginationControlled() ? this.props : this.state).activePage;
        var sortBy = (this.isSortByControlled() ? this.props : this.state).sortBy;
        var direction = (this.isDirectionControlled() ? this.props : this.state).direction;
        var searchQuery = (this.isSearchControlled() ? this.props : this.state).searchQuery;
        var pages = this.state.pages;
        var keys = this.props.searchInKeys ? this.props.searchInKeys : Object.keys(data[0]);
        // Search & sort data
        var searched = searchQuery === '' ? data : matchSorter(data, searchQuery, { keys: keys });
        var sorted = sortBy === null ? searched : sortData(searched, sortBy, direction);
        return typeof render !== 'function'
            ? null
            : render({
                data: paginate ? paginateData(sorted, activePage, itemsPerPage) : sorted,
                activePage: activePage,
                pages: pages,
                sortBy: sortBy,
                direction: direction,
                searchQuery: searchQuery,
                toggleDirection: this.toggleDirection,
                reset: this.reset,
                prevPage: this.prevPage,
                nextPage: this.nextPage,
                goToPage: this.goToPage,
                setDirection: this.setDirection,
                setSortBy: this.setSortBy,
                search: this.search
            });
    };
    DataSort.propTypes = {
        data: array.isRequired,
        render: func,
        paginate: bool,
        sortBy: string,
        direction: string,
        itemsPerPage: number,
        activePage: number,
        defaultSortBy: string,
        defaultDirection: string,
        searchQuery: string,
        searchInKeys: array
    };
    DataSort.defaultProps = {
        itemsPerPage: 10,
        paginate: false
    };
    return DataSort;
}(Component));

export default DataSort;
//# sourceMappingURL=react-data-sort.esm.js.map
